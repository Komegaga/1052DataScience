power2 <- c(59090445718, 61981666330, 67378329131, 66127460204.6482, 69696372914.6949)
year1.answer1 <- year1[power1 > 7e9]
year1.answer1
a <- 1:5
b <- c(x,y,z,a,b)
b <- c(6,7,8,9,10)
ans <- a[b]
ans
ans <- a[b > 7]
ans
test <- year1[power1]
test
library(swirl)
swirl()
swirl()
blood_type_factor[1] > blood_type_factor[2]
grades
grades_factor <- factor(grades, order = TRUE, levels = c("C", "B", "A"))
grades_factor
grades_factor[1] > grades_factor[2]
sumit
submit()
submit()
submit()
swirl()
matrix(1:18, 6, 3)
x <- matrix(1:18, 6, 3)
?matrix
x
x
attributes(x)
dim(x)
dim(x) <- c(3, 6)
x
dim(x) <- c(3, 3, 2)
x
array(1:18, c(3, 3, 2))
[]
[x]
x
x2 <- x[,,2]
x2
x2[1,]
x[1, ,2]
x
x[1, 1, 1] <- 2
x[1, 1, 1]
x[, 1, 1] <- 3
x[, , 1]
x[, , 1]
x[, , 2]
x[, , 1] + x[, , 2]
x[, , 1] + 1
martrix(1:4, 2, 2) + 1:@
martrix(1:4, 2, 2) + 1:2
matrix(1:4, 2, 2) + 1:2
attributes(x)
dim(x) <- NULL
x
cbind(1:4, 2, 2, matrix(1:4, 2, 2))
cbind(matrix(1:4, 2, 2), matrix(1:4, 2, 2))
rbind(matrix(1:4, 2, 2), matrix(1:4, 2, 2))
matrix(1:6, 2, 3) %% matrix(3:8, 3, 2)
matrix(1:6, 2, 3) %*% matrix(3:8, 3, 2)
1:3 %*% 1:3
matrix(1:9, 3, 3) %*% 1:3
1:3
matrix(1:9, 3, 3)
matrix(1:4, 2, 2)
t(matrix(1:4, 2, 2))
diag(1, 3)
x <- solve(A, b)
A %*% x
solve(A)
A %*% eigen(A)$vectors[,1] / eigen(A)$vectors[,1]
swirl()
swirl()
library(help = "datasets")
library(help = datasets)
library(help = datasets)
iris <- 1
iris <- 1
data(iris, package = "datasets")
head(iris)
iris
colnames(iris)
help(iris)
readBin(lvr_land.path, what = "row", n = 3)
readBin(lvr_land.path, what = "raw", n = 3)
readBin(lvr_land.path, what = "raw", n = 3)
readBin(lvr_land.path, what = "raw", n = 3)
readBin(lvr_land.path,
| what = "raw", n = 3)
readBin(lvr_land.path,what = "raw", n = 3)
readBin(lvr_land.path, what = "raw", n = 3)
lvr_land.path
swirl()
library(datasets)
library(help=datasets)
iris <- 1
data(iris, package = "datasets")
head(ir\)
head(iris)
colnames(iris)
help("iris")
help(iris)
readBin(lvr_land.path, what = "raw", n=3)
readLines(file(lvr_land.path, endcoding = "BIG5", n = 1))
readLines(file(lvr_land.path, encoding = "BIG5", n = 1))
readLines(file(lvr_land.path, encoding = "BIG5"), n = 1))
readLines(file(lvr_land.path, encoding = "BIG5"), n = 1)
readLines(file(lvr_land.path, encoding = "BIG5"), n = 5)
lvr_land.info <- file.info(lvr_land.path)
class(lvr_land.info)
lvr_land.info
colnames(lvr_land.info)
size
lvr_land.info.size
size(lvr_land.info)
dd
sad
size(lvr_land.path)
?
ded
help
lvr_land.info$size
?qplot
?(qplot)
swirl()
lvr_land.bin <- readBin(lvr_land.path)
?readBin
readBin(lvr_land.path, what = "raw", n = 3)
lvr_land.bin <- readBin(lvr_land.path, what = "raw", n = lvr_land.info$size)
library(stringi)
swirl()
library(help = datasets)
iris <- 1
data(iris, package = "datasets")
head(iris)
iris
colnames(iris)
help(iris)
readBun(lvr_land.path, what = "raw", n = 3)
readBin(lvr_land.path, what = "raw", n = 3)
readLines((file(lvr_land.path, encoding = "BIG5"), n=1)
readLines(file(lvr_land.path, encoding = "BIG5"), n=1)
readLines(file(lvr_land.path, encoding = "BIG5"), n=5)
lvr_land.info <- file.info(lvr_land.path)
class(lvr_land.info)
colnames(lvr_land.info)
file.info(lvr_land.info)
file.info(lvr_land.path)
lvr_land.bin <- readBin(lvr_land.path, what ="raw")
lvr_land.bin <- readBin(lvr_land.path, what = "raw", n = lvr_land.info$size)
library(stringi)
lvr_land.txt <- stri_encode(lvr_land.bin, "BIG-5", "UTF-8")
read.tav
read.table(lvr_land.path, fileEncoding = "BIG-5")
lvr_land <- read.table(lvr_land.path, fileEncoding = "BIG-5")
lvr_land <- read.table(file(lvr_land.path, encoding = "BIG5"), header = TRUE,sep = ",")
l10n_info()
read.table(textConnection(lvr_land.txt, encoding = "UTF-8"),
| header = TRUE, sep = ",")`
read.table(textConnection(lvr_land.txt, encoding = "UTF-8"),header = TRUE, sep = ",")`
read.table(textConnection(lvr_land.txt, encoding = "UTF-8"),header = TRUE, sep = ",")
submit()
swirl()
library(xml2)
xml2
library(xml2)
library(xml2)
library("xml2")
swirl()
library(xml2)
library(xm12)
check_then_install("xml2", "0.1.2")
library(xml2)
x1
?read_xml
doc1 <- read_xml(x1)
doc1
class(doc1)
swirl()
require(datasets)
airquality
airquality$Month
hist(x=airquality$Month,
main="Histogram of Month",         # 圖片的名稱
xlab="Month",                      # X軸的名稱
ylab="Frequency")
hist(x=airquality$Month, main="Histogram of Month",xlab="Month",ylab="Frequency")
plot(x=airquality$Ozone,
y=airquality$Wind,
main="Ozone to Wind",
xlab="Ozone(ppb)",
ylab="Wind(mph)",
pch=16                  # 點的圖形
)
plot(x=airquality$Ozone,
y=airquality$Wind,
main="Ozone to Wind",
xlab="Ozone(ppb)",
ylab="Wind(mph)",
)
plot(x=airquality$Ozone,
y=airquality$Wind,
main="Ozone to Wind",
xlab="Ozone(ppb)",
ylab="Wind(mph)",
pch=16                  # 點的圖形
)
May_data <- airquality[airquality$Month==5, ]   # 找出5月的資料
points(x=May_data$Ozone,
y=May_data$Wind,
pch=16,                  # 點的圖形
col="blue")
legend("topright",                                # 表示在右上角
pch = 1,                                   # pch代表點的圖案
col = c("blue", "red", "black"),           # col代表顏色
legend = c("May", "August", "Other Month") # 顏色所對應的名稱
)
lm.model <- lm(Wind~Ozone, airquality)    # 建立一個線性回歸
abline(lm.model,
lwd=2)
head(iris$Species)
require(neuralnet)
install.packages("neuralnet")
require(neuralnet)
install.packages("nnet")
install.packages("caret")
require(neuralnet) # for neuralnet(), nn model
require(nnet)      # for class.ind()
require(caret)
data <- iris
head(class.ind(data$Species))
class.ind(data$Species)
data$Species
data <- cbind(data, class.ind(data$Species))
head(data)
?formula
formula.bpn <- setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
bpn <- neuralnet(formula = formula.bpn,
data = data,
hidden = c(2),       # 一個隱藏層：2個node
learningrate = 0.01, # learning rate
threshold = 0.01,    # partial derivatives of the error function, a stopping criteria
stepmax = 5e5        # 最大的ieration數 = 500000(5*10^5)
)
plot(bpn)
bpn
smp.size <- floor(0.8*nrow(data))
?floor
nrow(data)
floor(nrow(data))
floor(data)
floor(0.8*nrow(data))
?set.seed
set.seed(131)
train.ind <- sample(seq_len(nrow(data)), smp.size)
seq_len(nrow(data))
train.ind
-train.ind
train <- data[train.ind, ]
train
test <- data[-train.ind, ]
test
model <- train(form=formula.bpn,     # formula
data=train,           # 資料
method="neuralnet",   # 類神經網路(bpn)
# 最重要的步驟：觀察不同排列組合(第一層1~4個nodes ; 第二層0~4個nodes)
# 看何種排列組合(多少隱藏層、每層多少個node)，會有最小的RMSE
tuneGrid = expand.grid(.layer1=c(1:4), .layer2=c(0:4), .layer3=c(0)),
# 以下的參數設定，和上面的neuralnet內一樣
learningrate = 0.01,  # learning rate
threshold = 0.01,     # partial derivatives of the error function, a stopping criteria
stepmax = 5e5         # 最大的ieration數 = 500000(5*10^5)
)
model
plot(model)
pn <- neuralnet(formula = formula.bpn,
data = train,
hidden = c(1,2),     # 第一隱藏層1個node，第二隱藏層2個nodes
learningrate = 0.01, # learning rate
threshold = 0.01,    # partial derivatives of the error function, a stopping criteria
stepmax = 5e5        # 最大的ieration數 = 500000(5*10^5)
)
bpn <- neuralnet(formula = formula.bpn,
data = train,
hidden = c(1,2),     # 第一隱藏層1個node，第二隱藏層2個nodes
learningrate = 0.01, # learning rate
threshold = 0.01,    # partial derivatives of the error function, a stopping criteria
stepmax = 5e5        # 最大的ieration數 = 500000(5*10^5)
)
plot(bpn)
plot(bpn)
pred <- compute(bpn, test[, 1:4])
test[, 1:4]
?compute
pred$net.result
pred.result <- round(pred$net.result)
pred.result
pred.result <- as.data.frame(pred.result)
pred.result$Species <- ""
for(i in 1:nrow(pred.result)){
if(pred.result[i, 1]==1){ pred.result[i, "Species"] <- "setosa"}
if(pred.result[i, 2]==1){ pred.result[i, "Species"] <- "versicolor"}
if(pred.result[i, 3]==1){ pred.result[i, "Species"] <- "virginica"}
}
pred.result
pred.result$Species
table(real    = test$Species,
predict = pred.result$Species)
?table
table
library(ggplot2)
ggplot(mpg, aes(x = displ, y = hwy))
ggplot(mpg, aes(x = displ, y = hwy)) + geom_point(aes(colour = class))
mpg
clear
summary(mpg)
head(mpg)
sessionInfo()
install.packages("githubinstall")
i_f <- "test1.csv"
d <- read.csv(i_f)
d <- read.csv2(i_f)
d <- read.csv(i_f)
i_f <- "test1.csv"
d <- read.csv(i_f)
gewtd()
getwd()
system("Rscript hw1_105753032.R -files test.1.csv –out result.csv")
system("Rscript hw1_105753032.R -files test.1.csv –out result.csv")
system("Rscript hw1_105753032.R -files test.1.csv –out result.csv")
system("Rscript hw1_105753032.R -files test.1.csv –out result2.csv")
divide <- function(numerator, denominator) { numerator/denominator }
divide(2,1)
divide(denominator=2,numerator=1)
divide(denominator<-2,numerator<-1)  # yields 2, a wrong answer
clear
x<-1
good <- function() { x <- 5}
good()
print(x)
bad <- function() { x <<- 5}
bad()
print(x)
library(tidyverse)
ggplot(dota = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
fliter(mpg, cyl = 8)
filter(diamond, carat > 3)
library(tidyverse)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
fliter(mpg, cyl = 8)
filter(diamond, carat > 3)
install.packages("tidyverse")
library(tidyverse)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
fliter(mpg, cyl = 8)
filter(diamond, carat > 3)
library(tidyverse)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
fliter(mpg, cyl == 8)
filter(diamond, carat > 3)
library(tidyverse)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
filter(mpg, cyl == 8)
filter(diamonds, carat > 3)
c(T,T,F,F) == c(T,F,T,F)
c(T,T,F,F) & c(T,F,T,F)
c(T,T,F,F) | c(T,F,T,F)
c(T,T,F,F) && c(T,F,T,F)
c(T,T,F,F) && c(F,F,T,F)
c(F,T,F,F) && c(F,F,T,F)
c(F,T,T,T) && c(F,T,T,T)
c(T,T,F,F) == c(T,F,T,F)
identical(c(T,T,F,F),c(T,F,T,F))
all.equal(c(T,T,F,F),c(T,F,T,F))
class(c(1,2))
add <- function(a,b) { a + b}
add(1,2)
ls()
vec <- c(1,2)
fun <- function(v) { v[[2]]<-5; print(v)}
fun(vec)
print(vec)
vec <- c(1,2)
c[1]
vec[1]
vec <- c(1,2)
vec[[1]]
vec <- c(1,2)
fun <- function(v) { v[2]<-5; print(v)}
fun(vec)
1:10
1:2*5
1:(2*5)
rep(1,10)
rep(10,1)
e – VECTORS
a<-c(1:10)
length(a)
a[1]
a[[1]]
a[11]
a[[11]]
b<-c()
length(b)
is.null(b)
is.na(b)
c(6,'fred')
list(6,'fred')
list[1]
list[[1]
x <- list('a'=6,b='fred')
names(x)
x$a
x$b
x[['a']]
x <- list(a=6,b='fred')
names(x)
x$a
x$b
x[['a']]
c('a','b')[[7]]
c('a','b')[7]
list(a='b')['a']
list(a='b')[['a']]
list(a='b')['a']
list(a='b')[['a']]
list(a='b')['a']
list(a='b')[c('a','a')]
list(a='b')[[c('a','a')]]
b<-matrix(c(2,4,3,1,5,7), nrow=3,ncol=2)
b[1,2]
b
t(b)
cbind(b, b)
rbind(b, b)
d = data.frame(x=c(1,2,3), y=c('x','y','z'))
d[,1]
d
d[,'x']
d[['x']]
d$x
d[c(1,3),]
subset(d,c(T,F,T))
d[c(1,3)]
d = data.frame(x=c(1,2,3), y=c('x','y','z'))
str(d)
d
factor('red',levels=c('red','orange'))
factor('apple',levels=c('red','orange'))
uciCar <- read.table(  	# Note: 1
'http://www.win-vector.com/dfiles/car.data.csv', 	# Note: 2
sep=',', 	# Note: 3
header=T 	# Note: 4
)
head(uciCar)
uciCar$doors
?str
str(uciCar)
class(uciCar)
dim(uciCar)
d <- read.table(paste('http://archive.ics.uci.edu/ml/','machine-learning-databases/statlog/german/german.data',sep=''),stringsAsFactors=F,header=F)
head(d)
d
d$Good.Loan <- as.factor(ifelse(d$Good.Loan==1,'GoodLoan','BadLoan'))
d <- read.table(paste('http://archive.ics.uci.edu/ml/','machine-learning-databases/statlog/german/german.data'),sep='',stringsAsFactors=F,header=F)
d <- read.table(paste('http://archive.ics.uci.edu/ml/','machine-learning-databases/statlog/german/german.data'),sep=',',stringsAsFactors=F,header=F)
install.packages("knitr")
install.packages("knitr")
library(knitr)
knit('simple.Rmd')
library(knitr)
knit('simple.Rmd')
clear
library('rpart')
load('GCDData.RData')
model <- rpart(Good.Loan ~
Duration.in.month +
Installment.rate.in.percentage.of.disposable.income +
Credit.amount  +
Other.installment.plans,
data=d,
control=rpart.control(maxdepth=4),
method="class")
library('rpart')
load('GCDData.RData')
library(ggplot2)
x <- seq(from=-5, to=5, length.out=100) # the interval [-5 5]
f <- dnorm(x)                      # normal with mean 0 and sd 1
ggplot(data.frame(x=x,y=f), aes(x=x,y=y)) + geom_line()
ggplot(data.frame(x=x,y=f), aes(x=x,y=y))
ggplot(data.frame(x=x,y=f), aes(x=x,y=y)) + geom_line()
?ggplot
ggplot(data.frame(x=x,y=f)) + geom_line()
ggplot(data.frame(x=x,y=f)) + geom_line()
?geom_line
ggplot(data.frame(x=u),aes(x=x))
u <- rnorm(1000)
ggplot(data.frame(x=u),aes(x=x))
ggplot(data.frame(x=u),aes(x=x)) + geom_line()
u <- rnorm(1000)
ggplot(data.frame(x=u),aes(x=x)) + geom_line()
ggplot(data.frame(x=u),aes(x=x)) + geom_density()
ggplot(data.frame(x=u),aes(x=x)) + geom_density() + geom_line(data = data.frame(x=x,y=f). linetype =2)
ggplot(data.frame(x=u),aes(x=x)) + geom_density() + geom_line(data = data.frame(x=x,y=f), linetype =2)
ggplot(data.frame(x=u),aes(x=x)) + geom_density() + geom_line(data = data.frame(x=x,y=f),aes(x=x,y=y) linetype =2)
ggplot(data.frame(x=u),aes(x=x)) + geom_density() + geom_line(data = data.frame(x=x,y=f),aes(x=x,y=y), linetype =2)
shiny::runApp('Google 雲端硬碟/Graduate/1052/DataScience/1052DataScience/ass4')
setwd("~/Google 雲端硬碟/Graduate/1052/DataScience/1052DataScience")
